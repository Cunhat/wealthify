/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createServerRootRoute } from '@tanstack/react-start/server'

import { Route as rootRouteImport } from './routes/__root'
import { Route as LoginRouteImport } from './routes/login'
import { Route as AuthedRouteImport } from './routes/_authed'
import { Route as AuthedIndexRouteImport } from './routes/_authed/index'
import { Route as AuthedDashboardRouteImport } from './routes/_authed/dashboard'
import { Route as AuthedAccountsRouteImport } from './routes/_authed/accounts'
import { Route as AuthedCategoriesRouteRouteImport } from './routes/_authed/categories.route'
import { Route as AuthedCategoriesIndexRouteImport } from './routes/_authed/categories.index'
import { Route as AuthedCategoriesCategoryIdRouteImport } from './routes/_authed/categories.$categoryId'
import { Route as AuthedAccountsAccountIdRouteImport } from './routes/_authed/accounts.$accountId'
import { ServerRoute as ApiTrpcSplatServerRouteImport } from './routes/api.trpc.$'
import { ServerRoute as ApiAuthSplatServerRouteImport } from './routes/api/auth/$'

const rootServerRouteImport = createServerRootRoute()

const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedRoute = AuthedRouteImport.update({
  id: '/_authed',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthedIndexRoute = AuthedIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedDashboardRoute = AuthedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedAccountsRoute = AuthedAccountsRouteImport.update({
  id: '/accounts',
  path: '/accounts',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedCategoriesRouteRoute = AuthedCategoriesRouteRouteImport.update({
  id: '/categories',
  path: '/categories',
  getParentRoute: () => AuthedRoute,
} as any)
const AuthedCategoriesIndexRoute = AuthedCategoriesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AuthedCategoriesRouteRoute,
} as any)
const AuthedCategoriesCategoryIdRoute =
  AuthedCategoriesCategoryIdRouteImport.update({
    id: '/$categoryId',
    path: '/$categoryId',
    getParentRoute: () => AuthedCategoriesRouteRoute,
  } as any)
const AuthedAccountsAccountIdRoute = AuthedAccountsAccountIdRouteImport.update({
  id: '/$accountId',
  path: '/$accountId',
  getParentRoute: () => AuthedAccountsRoute,
} as any)
const ApiTrpcSplatServerRoute = ApiTrpcSplatServerRouteImport.update({
  id: '/api/trpc/$',
  path: '/api/trpc/$',
  getParentRoute: () => rootServerRouteImport,
} as any)
const ApiAuthSplatServerRoute = ApiAuthSplatServerRouteImport.update({
  id: '/api/auth/$',
  path: '/api/auth/$',
  getParentRoute: () => rootServerRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof LoginRoute
  '/categories': typeof AuthedCategoriesRouteRouteWithChildren
  '/accounts': typeof AuthedAccountsRouteWithChildren
  '/dashboard': typeof AuthedDashboardRoute
  '/': typeof AuthedIndexRoute
  '/accounts/$accountId': typeof AuthedAccountsAccountIdRoute
  '/categories/$categoryId': typeof AuthedCategoriesCategoryIdRoute
  '/categories/': typeof AuthedCategoriesIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof LoginRoute
  '/accounts': typeof AuthedAccountsRouteWithChildren
  '/dashboard': typeof AuthedDashboardRoute
  '/': typeof AuthedIndexRoute
  '/accounts/$accountId': typeof AuthedAccountsAccountIdRoute
  '/categories/$categoryId': typeof AuthedCategoriesCategoryIdRoute
  '/categories': typeof AuthedCategoriesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_authed': typeof AuthedRouteWithChildren
  '/login': typeof LoginRoute
  '/_authed/categories': typeof AuthedCategoriesRouteRouteWithChildren
  '/_authed/accounts': typeof AuthedAccountsRouteWithChildren
  '/_authed/dashboard': typeof AuthedDashboardRoute
  '/_authed/': typeof AuthedIndexRoute
  '/_authed/accounts/$accountId': typeof AuthedAccountsAccountIdRoute
  '/_authed/categories/$categoryId': typeof AuthedCategoriesCategoryIdRoute
  '/_authed/categories/': typeof AuthedCategoriesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/login'
    | '/categories'
    | '/accounts'
    | '/dashboard'
    | '/'
    | '/accounts/$accountId'
    | '/categories/$categoryId'
    | '/categories/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/login'
    | '/accounts'
    | '/dashboard'
    | '/'
    | '/accounts/$accountId'
    | '/categories/$categoryId'
    | '/categories'
  id:
    | '__root__'
    | '/_authed'
    | '/login'
    | '/_authed/categories'
    | '/_authed/accounts'
    | '/_authed/dashboard'
    | '/_authed/'
    | '/_authed/accounts/$accountId'
    | '/_authed/categories/$categoryId'
    | '/_authed/categories/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AuthedRoute: typeof AuthedRouteWithChildren
  LoginRoute: typeof LoginRoute
}
export interface FileServerRoutesByFullPath {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesByTo {
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRoutesById {
  __root__: typeof rootServerRouteImport
  '/api/auth/$': typeof ApiAuthSplatServerRoute
  '/api/trpc/$': typeof ApiTrpcSplatServerRoute
}
export interface FileServerRouteTypes {
  fileServerRoutesByFullPath: FileServerRoutesByFullPath
  fullPaths: '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesByTo: FileServerRoutesByTo
  to: '/api/auth/$' | '/api/trpc/$'
  id: '__root__' | '/api/auth/$' | '/api/trpc/$'
  fileServerRoutesById: FileServerRoutesById
}
export interface RootServerRouteChildren {
  ApiAuthSplatServerRoute: typeof ApiAuthSplatServerRoute
  ApiTrpcSplatServerRoute: typeof ApiTrpcSplatServerRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/login': {
      id: '/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof LoginRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed': {
      id: '/_authed'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthedRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_authed/': {
      id: '/_authed/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AuthedIndexRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/dashboard': {
      id: '/_authed/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof AuthedDashboardRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/accounts': {
      id: '/_authed/accounts'
      path: '/accounts'
      fullPath: '/accounts'
      preLoaderRoute: typeof AuthedAccountsRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/categories': {
      id: '/_authed/categories'
      path: '/categories'
      fullPath: '/categories'
      preLoaderRoute: typeof AuthedCategoriesRouteRouteImport
      parentRoute: typeof AuthedRoute
    }
    '/_authed/categories/': {
      id: '/_authed/categories/'
      path: '/'
      fullPath: '/categories/'
      preLoaderRoute: typeof AuthedCategoriesIndexRouteImport
      parentRoute: typeof AuthedCategoriesRouteRoute
    }
    '/_authed/categories/$categoryId': {
      id: '/_authed/categories/$categoryId'
      path: '/$categoryId'
      fullPath: '/categories/$categoryId'
      preLoaderRoute: typeof AuthedCategoriesCategoryIdRouteImport
      parentRoute: typeof AuthedCategoriesRouteRoute
    }
    '/_authed/accounts/$accountId': {
      id: '/_authed/accounts/$accountId'
      path: '/$accountId'
      fullPath: '/accounts/$accountId'
      preLoaderRoute: typeof AuthedAccountsAccountIdRouteImport
      parentRoute: typeof AuthedAccountsRoute
    }
  }
}
declare module '@tanstack/react-start/server' {
  interface ServerFileRoutesByPath {
    '/api/trpc/$': {
      id: '/api/trpc/$'
      path: '/api/trpc/$'
      fullPath: '/api/trpc/$'
      preLoaderRoute: typeof ApiTrpcSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
    '/api/auth/$': {
      id: '/api/auth/$'
      path: '/api/auth/$'
      fullPath: '/api/auth/$'
      preLoaderRoute: typeof ApiAuthSplatServerRouteImport
      parentRoute: typeof rootServerRouteImport
    }
  }
}

interface AuthedCategoriesRouteRouteChildren {
  AuthedCategoriesCategoryIdRoute: typeof AuthedCategoriesCategoryIdRoute
  AuthedCategoriesIndexRoute: typeof AuthedCategoriesIndexRoute
}

const AuthedCategoriesRouteRouteChildren: AuthedCategoriesRouteRouteChildren = {
  AuthedCategoriesCategoryIdRoute: AuthedCategoriesCategoryIdRoute,
  AuthedCategoriesIndexRoute: AuthedCategoriesIndexRoute,
}

const AuthedCategoriesRouteRouteWithChildren =
  AuthedCategoriesRouteRoute._addFileChildren(
    AuthedCategoriesRouteRouteChildren,
  )

interface AuthedAccountsRouteChildren {
  AuthedAccountsAccountIdRoute: typeof AuthedAccountsAccountIdRoute
}

const AuthedAccountsRouteChildren: AuthedAccountsRouteChildren = {
  AuthedAccountsAccountIdRoute: AuthedAccountsAccountIdRoute,
}

const AuthedAccountsRouteWithChildren = AuthedAccountsRoute._addFileChildren(
  AuthedAccountsRouteChildren,
)

interface AuthedRouteChildren {
  AuthedCategoriesRouteRoute: typeof AuthedCategoriesRouteRouteWithChildren
  AuthedAccountsRoute: typeof AuthedAccountsRouteWithChildren
  AuthedDashboardRoute: typeof AuthedDashboardRoute
  AuthedIndexRoute: typeof AuthedIndexRoute
}

const AuthedRouteChildren: AuthedRouteChildren = {
  AuthedCategoriesRouteRoute: AuthedCategoriesRouteRouteWithChildren,
  AuthedAccountsRoute: AuthedAccountsRouteWithChildren,
  AuthedDashboardRoute: AuthedDashboardRoute,
  AuthedIndexRoute: AuthedIndexRoute,
}

const AuthedRouteWithChildren =
  AuthedRoute._addFileChildren(AuthedRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AuthedRoute: AuthedRouteWithChildren,
  LoginRoute: LoginRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
const rootServerRouteChildren: RootServerRouteChildren = {
  ApiAuthSplatServerRoute: ApiAuthSplatServerRoute,
  ApiTrpcSplatServerRoute: ApiTrpcSplatServerRoute,
}
export const serverRouteTree = rootServerRouteImport
  ._addFileChildren(rootServerRouteChildren)
  ._addFileTypes<FileServerRouteTypes>()
